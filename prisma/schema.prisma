// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id() @default(autoincrement())
  name     String @db.VarChar(255)
  username String @unique() @db.VarChar(255)
  email    String @unique() @db.VarChar(255)
  phone    String @db.VarChar(255)
  website  String @db.VarChar(255)

  address Address?
  company Company?

  todos  Todo[]
  albums Album[]
  posts  Post[]

  @@map("users")
}

model Address {
  id      Int    @id() @default(autoincrement())
  street  String @db.VarChar(255)
  suite   String @db.VarChar(255)
  city    String @db.VarChar(255)
  zipcode String @db.VarChar(255)

  userId Int  @unique() @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  geo Geo?

  @@map("addresses")
}

model Geo {
  id  Int    @id() @default(autoincrement())
  lat String @db.VarChar(255)
  lng String @db.VarChar(255)

  addressId Int     @unique() @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("geo")
}

model Company {
  id          Int    @id() @default(autoincrement())
  name        String @db.VarChar(255)
  catchPhrase String @map("catch_phrase") @db.VarChar(255)
  bs          String @db.VarChar(255)

  userId Int  @unique() @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("companies")
}

model Todo {
  id        Int     @id() @default(autoincrement())
  title     String  @db.VarChar(255)
  completed Boolean @default(false)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("todos")
}

model Album {
  id    Int    @id() @default(autoincrement())
  title String @db.VarChar(255)

  userId Int     @map("user_id")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photos Photo[]

  @@map("albums")
}

model Photo {
  id           Int    @id() @default(autoincrement())
  title        String @db.VarChar(255)
  url          String @db.VarChar(255)
  thumbnailUrl String @map("thumbnail_url") @db.VarChar(255)

  albumId Int   @map("album_id")
  album   Album @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("photos")
}

model Post {
  id    Int    @id() @default(autoincrement())
  title String @db.VarChar(255)
  body  String @db.VarChar(1023)

  userId   Int       @map("user_id")
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments Comment[]

  @@map("posts")
}

model Comment {
  id    Int    @id() @default(autoincrement())
  name  String @db.VarChar(255)
  email String @db.VarChar(255)
  body  String @db.VarChar(1023)

  postId Int  @map("post_id")
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comments")
}
